generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model address {
  address_id  Int        @id @default(autoincrement())
  address_dir String?    @db.VarChar(200)
  location    String?    @db.VarChar(150)
  number      Int?
  customer    customer[]
  employee    employee[]
  stock       stock[]
  store       store?
}

model catalogue {
  catalogue_id                      Int       @id @default(autoincrement())
  type                              String?   @db.VarChar(50)
  code                              String?   @db.VarChar(50)
  description                       String?   @db.VarChar(150)
  model_model_brand_codeTocatalogue model[]   @relation("model_brand_codeTocatalogue")
  reserve                           reserve[]
  salary                            salary[]
  sale                              sale[]
  vehicle                           vehicle[]
}

model commission {
  commission_id Int       @id @default(autoincrement())
  employee_id   Int?
  description   String?   @db.VarChar(255)
  amount        Decimal   @db.Decimal(5, 2)
  employee      employee? @relation(fields: [employee_id], references: [employee_id], onDelete: NoAction, onUpdate: NoAction)
}

model customer {
  customer_id      Int                @id @default(autoincrement())
  address_id       Int?
  address          address?           @relation(fields: [address_id], references: [address_id], onDelete: NoAction, onUpdate: NoAction)
  customer_contact customer_contact[]
  juridical        juridical[]
  physical         physical[]
  reserve          reserve[]
  sale             sale[]
}

model customer_contact {
  contact_id  Int       @id @default(autoincrement())
  customer_id Int?
  type        String?   @db.VarChar(30)
  value       String?   @db.VarChar(150)
  customer    customer? @relation(fields: [customer_id], references: [customer_id], onDelete: NoAction, onUpdate: NoAction)
}

model employee {
  employee_id      Int                @id @default(autoincrement())
  first_name       String?            @db.VarChar(80)
  last_name        String?            @db.VarChar(80)
  birth_date       DateTime?          @db.Date
  address_id       Int?
  store_id         Int?
  commission       commission[]
  address          address?           @relation(fields: [address_id], references: [address_id], onDelete: NoAction, onUpdate: NoAction)
  store            store?             @relation(fields: [store_id], references: [store_id], onDelete: NoAction, onUpdate: NoAction)
  employee_contact employee_contact[]
  payment          payment[]
  salary           salary[]
  sale             sale[]
}

model employee_contact {
  contact_id    Int       @id @default(autoincrement())
  employee_id   Int?
  contact_type  String?   @db.VarChar(30)
  contact_value String?   @db.VarChar(150)
  employee      employee? @relation(fields: [employee_id], references: [employee_id], onDelete: NoAction, onUpdate: NoAction)
}

model juridical {
  juridical_id Int       @id @default(autoincrement())
  customer_id  Int?
  name         String?   @db.VarChar(180)
  customer     customer? @relation(fields: [customer_id], references: [customer_id], onDelete: NoAction, onUpdate: NoAction)
}

model model {
  model_id                              Int        @id @default(autoincrement())
  name                                  String?    @db.VarChar(80)
  brand_code                            Int?
  model_date                            DateTime?  @db.Date
  description                           String?    @db.VarChar(150)
  price                                 Decimal?   @db.Decimal(12, 2)
  catalogue_model_brand_codeTocatalogue catalogue? @relation("model_brand_codeTocatalogue", fields: [brand_code], references: [catalogue_id], onDelete: NoAction, onUpdate: NoAction)
  vehicle                               vehicle[]
}

model payment {
  payment_id        Int             @id @default(autoincrement())
  payment_date      DateTime?       @db.Date
  payment_detail_id Int?
  employee_id       Int?
  sale_id           Int?
  employee          employee?       @relation(fields: [employee_id], references: [employee_id], onDelete: NoAction, onUpdate: NoAction)
  payment_detail    payment_detail? @relation(fields: [payment_detail_id], references: [payment_detail_id], onDelete: NoAction, onUpdate: NoAction)
  sale              sale?           @relation(fields: [sale_id], references: [sale_id], onDelete: NoAction, onUpdate: NoAction)
  reserve           reserve[]
}

model payment_detail {
  payment_detail_id Int       @id @default(autoincrement())
  description       String?   @db.VarChar(200)
  type_code         Int?
  currency_code     Int?
  amount            Decimal?  @db.Decimal(12, 2)
  receipt_code      String?   @db.VarChar(50)
  payment           payment[]
}

model physical {
  physical_id Int       @id @default(autoincrement())
  customer_id Int?
  first_name  String?   @db.VarChar(80)
  last_name   String?   @db.VarChar(80)
  birth_date  DateTime? @db.Date
  customer    customer? @relation(fields: [customer_id], references: [customer_id], onDelete: NoAction, onUpdate: NoAction)
}

model reserve {
  reserve_id    Int        @id @default(autoincrement())
  currency_code Int?
  cost          Decimal?   @db.Decimal(4, 2)
  customer_id   Int?
  vehicle_id    Int?
  payment_id    Int?
  catalogue     catalogue? @relation(fields: [currency_code], references: [catalogue_id], onDelete: NoAction, onUpdate: NoAction)
  customer      customer?  @relation(fields: [customer_id], references: [customer_id], onDelete: NoAction, onUpdate: NoAction)
  payment       payment?   @relation(fields: [payment_id], references: [payment_id], onDelete: NoAction, onUpdate: NoAction)
  vehicle       vehicle?   @relation(fields: [vehicle_id], references: [vehicle_id], onDelete: NoAction, onUpdate: NoAction)
}

model salary {
  salary_id     Int        @id @default(autoincrement())
  employee_id   Int?
  start_date    DateTime   @db.Date
  end_date      DateTime   @db.Date
  payment_date  DateTime   @db.Date
  currency_code Int?
  amount        Decimal?   @db.Decimal(12, 2)
  catalogue     catalogue? @relation(fields: [currency_code], references: [catalogue_id], onDelete: NoAction, onUpdate: NoAction)
  employee      employee?  @relation(fields: [employee_id], references: [employee_id], onDelete: NoAction, onUpdate: NoAction)
}

model sale {
  sale_id     Int        @id @default(autoincrement())
  state_code  Int?
  payment_id  Int?
  customer_id Int?
  employee_id Int?
  vehicle_id  Int?
  payment     payment[]
  customer    customer?  @relation(fields: [customer_id], references: [customer_id], onDelete: NoAction, onUpdate: NoAction)
  employee    employee?  @relation(fields: [employee_id], references: [employee_id], onDelete: NoAction, onUpdate: NoAction)
  catalogue   catalogue? @relation(fields: [state_code], references: [catalogue_id], onDelete: NoAction, onUpdate: NoAction)
  vehicle     vehicle?   @relation(fields: [vehicle_id], references: [vehicle_id], onDelete: NoAction, onUpdate: NoAction)
}

model stock {
  stock_id   Int       @id @default(autoincrement())
  name       String?   @db.VarChar(120)
  phone      String?   @db.VarChar(11)
  address_id Int?
  store_id   Int?
  store      store?    @relation(fields: [store_id], references: [store_id], onDelete: NoAction, onUpdate: NoAction)
  address    address?  @relation(fields: [address_id], references: [address_id], onDelete: NoAction, onUpdate: NoAction, map: "stock_store_id_fkey1")
  vehicle    vehicle[]
}

model store {
  store_id   Int        @id @default(autoincrement())
  phone      String?    @db.VarChar(11)
  address_id Int?       @unique
  employee   employee[]
  stock      stock[]
  address    address?   @relation(fields: [address_id], references: [address_id], onDelete: NoAction, onUpdate: NoAction)
}

model vehicle {
  vehicle_id      Int        @id @default(autoincrement())
  model_id        Int?
  stock_id        Int?
  identify_number String?    @db.VarChar(10)
  chasis_number   Int
  color_code      Int?
  reserve         reserve[]
  sale            sale[]
  catalogue       catalogue? @relation(fields: [color_code], references: [catalogue_id], onDelete: NoAction, onUpdate: NoAction, map: "vehicle_color_color_code_fkey")
  model           model?     @relation(fields: [model_id], references: [model_id], onDelete: NoAction, onUpdate: NoAction)
  stock           stock?     @relation(fields: [stock_id], references: [stock_id], onDelete: NoAction, onUpdate: NoAction)
}
